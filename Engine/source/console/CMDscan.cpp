#line 2 "CMDscan.cpp"

#line 4 "CMDscan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE CMDrestart(CMDin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int CMDleng;

extern FILE *CMDin, *CMDout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up CMDtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up CMDtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via CMDrestart()), so that the user can continue scanning by
	 * just pointing CMDin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when CMDtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int CMDleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow CMDwrap()'s to do buffer switches
 * instead of setting up a fresh CMDin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void CMDrestart (FILE *input_file  );
void CMD_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE CMD_create_buffer (FILE *file,int size  );
void CMD_delete_buffer (YY_BUFFER_STATE b  );
void CMD_flush_buffer (YY_BUFFER_STATE b  );
void CMDpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void CMDpop_buffer_state (void );

static void CMDensure_buffer_stack (void );
static void CMD_load_buffer_state (void );
static void CMD_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER CMD_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE CMD_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE CMD_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE CMD_scan_bytes (yyconst char *bytes,int len  );

void *CMDalloc (yy_size_t  );
void *CMDrealloc (void *,yy_size_t  );
void CMDfree (void *  );

#define yy_new_buffer CMD_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        CMDensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            CMD_create_buffer(CMDin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        CMDensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            CMD_create_buffer(CMDin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *CMDin = (FILE *) 0, *CMDout = (FILE *) 0;

typedef int yy_state_type;

extern int CMDlineno;

int CMDlineno = 1;

extern char *CMDtext;
#define yytext_ptr CMDtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up CMDtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	CMDleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[233] =
    {   0,
        0,    0,   95,   93,    1,    5,    4,   51,   93,   93,
       58,   57,   93,   41,   42,   45,   43,   56,   44,   50,
       46,   90,   90,   52,   53,   47,   61,   48,   38,   36,
       88,   88,   88,   88,   39,   40,   59,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   54,   49,   55,   60,    1,    0,    9,    0,    6,
        0,    0,   17,   87,   25,   12,   26,    0,    7,    0,
       23,   16,   21,   15,   22,   31,   91,   37,    3,   24,
        0,   90,    0,    0,   14,   19,   11,    8,   10,   20,
       88,   33,   88,   88,   27,   88,   88,   88,   88,   88,

       88,   69,   88,   88,   88,   88,   70,   62,   88,   88,
       63,   88,   88,   88,   88,   88,   88,   28,   13,   18,
       92,   87,    0,   32,    3,    3,   91,    0,   91,   89,
       29,   30,   35,   34,   88,   88,   88,   88,   88,   88,
       88,   88,   73,   88,   88,   76,   88,   88,   88,   88,
       88,   88,   92,    0,    2,    2,   88,   88,   79,   88,
       88,   88,   66,   88,   88,   88,   88,   88,   88,   88,
       88,   85,   88,    2,    2,    2,    2,    2,   88,   64,
       88,   88,   88,   86,   88,   88,   88,   88,   88,   88,
       88,   68,    0,    2,    2,   67,   88,   88,   88,   88,

       88,   88,   88,   65,   88,   81,    0,    2,    2,   88,
       88,   82,   72,   88,   88,   83,   88,   80,    0,    2,
        2,    2,   74,   88,   71,   75,   88,   88,   78,   84,
       77,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   31,
       33,   33,   33,   33,   33,   34,   33,   35,   33,   36,
       33,   33,   37,   38,   33,   33,   33,   39,   33,   33,
       40,   41,   42,   43,   33,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   33,   53,   54,   55,   56,
       57,   58,   33,   59,   60,   61,   62,   33,   63,   39,
       33,   33,   64,   65,   66,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    4,
        5,    1,    1,    6,    1,    1,    1,    4,    4,    4,
        4,    4,    7,    7,    7,    7,    7,    7,    7,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[248] =
    {   0,
        0,    0,  380,  381,  377,  381,  381,   61,   63,   51,
       53,   65,   66,  381,  381,  354,   64,  381,   66,   60,
       68,   76,   80,  356,  381,   60,  352,   77,  381,  381,
        0,  341,  338,  345,  381,  381,  348,  311,  311,   54,
       61,  315,   59,   38,   62,  309,  323,  318,   62,  306,
      313,  381,   89,  381,  381,  361,  338,  381,  111,  381,
      357,  100,  381,  339,  381,  381,  381,  112,  381,  355,
      381,  381,  381,  333,  381,  381,  107,  381,  339,  381,
      110,  114,  121,    0,  381,  332,  381,  381,  381,  331,
        0,    0,  324,  324,  381,  292,  303,  290,  293,  287,

      298,    0,  286,  291,  285,  287,    0,    0,  287,  278,
        0,  294,  278,  282,  285,  274,  283,  381,  381,  381,
      313,  312,  311,  381,    0,  139,  119,  125,  128,    0,
      381,  381,    0,    0,  283,  286,  281,  267,  283,  282,
      277,  264,  275,  276,  273,    0,  267,  257,  268,  256,
      268,  261,  293,  292,  146,  152,  253,  258,    0,  258,
      264,  246,    0,  259,  262,  244,  244,  259,  243,  247,
      254,    0,  251,  155,  157,  162,  165,  168,  237,    0,
      241,  242,  241,    0,  248,  241,  230,  199,  185,  190,
      183,    0,  215,  173,  175,    0,  168,  172,  161,  167,

      154,  164,  159,    0,  145,  198,  185,  178,  181,  153,
      154,    0,  191,  141,  146,    0,  117,  381,    0,  184,
      186,  191,    0,  110,  381,    0,   88,   76,    0,    0,
        0,  381,  209,  213,  220,  224,  228,  232,  239,  119,
      243,  250,  257,  264,  271,  278,  285
    } ;

static yyconst flex_int16_t yy_def[248] =
    {   0,
      232,    1,  232,  232,  232,  232,  232,  232,  233,  234,
      234,  232,  235,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      236,  236,  236,  236,  232,  232,  232,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  232,  232,  232,  232,  232,  232,  232,  233,  232,
      233,  237,  232,  238,  232,  232,  232,  235,  232,  235,
      232,  232,  232,  232,  232,  232,  232,  232,  239,  232,
      232,  232,  232,  240,  232,  232,  232,  232,  232,  232,
      236,  236,  236,  236,  232,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  232,  232,  232,
      241,  238,  238,  232,  239,  242,  232,  232,  232,  240,
      232,  232,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  241,  241,  243,  244,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  243,  232,  243,  244,  244,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  232,  243,  244,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  232,  245,  246,  236,
      236,  236,  236,  236,  236,  236,  236,  232,  247,  243,
      244,  244,  236,  236,  232,  236,  236,  236,  236,  236,
      236,    0,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232
    } ;

static yyconst flex_int16_t yy_nxt[449] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   31,   31,
       31,   31,   31,   31,   32,   31,   33,   34,   31,   35,
        4,   36,   37,   38,   39,   40,   41,   42,   43,   31,
       31,   44,   31,   31,   31,   45,   46,   47,   48,   49,
       50,   31,   51,   52,   53,   54,   55,   57,   60,   62,
       62,   62,   62,   66,   63,   69,   65,   72,   77,   77,
       78,   74,   86,   87,   58,   79,  107,   73,   67,   75,
       76,   80,   81,  108,   82,   82,   81,   98,   82,   82,

       89,   90,  104,   61,  100,  109,   70,   83,  101,  110,
       99,   83,  118,  114,   84,  105,   60,  102,   62,   62,
      106,   69,  130,   83,  115,   77,   77,   83,  127,  127,
       81,  231,   82,   82,  128,  230,  128,  127,  127,  129,
      129,  156,  156,  129,  129,   83,  129,  129,  175,  175,
       83,   61,   70,  119,  175,  175,  125,  175,  175,  175,
      175,   83,  229,  176,  175,  175,   83,  175,  175,  178,
      175,  175,  176,  228,  193,  175,  175,  175,  175,  194,
      221,  221,  178,  221,  221,  195,  175,  175,  175,  175,
      208,  227,  209,  175,  175,  208,  226,  225,  209,  224,

      223,  176,  219,  178,  218,  217,  216,  215,  178,   59,
      214,   59,   59,   59,   59,   59,   64,  213,   64,   64,
       68,  212,   68,   68,   68,   68,   68,   91,  211,  210,
       91,  121,  207,  206,  121,  122,  122,  205,  122,  125,
      204,  125,  125,  125,  125,  125,  153,  153,  203,  153,
      155,  155,  155,  155,  155,  155,  155,  174,  174,  174,
      174,  174,  174,  174,  177,  177,  177,  177,  177,  177,
      177,  220,  220,  220,  220,  220,  220,  220,  222,  222,
      222,  222,  222,  222,  222,  156,  156,  202,  156,  156,
      156,  156,  201,  200,  199,  198,  197,  196,  192,  191,

      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      180,  179,  154,  154,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  164,  163,  162,  161,  160,  159,  158,
      157,  123,  123,  154,  152,  151,  150,  149,  148,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  138,  137,
      136,  135,  134,  133,  132,  131,  126,  124,   68,  123,
       59,  120,   56,  117,  116,  113,  112,  111,  103,   97,
       96,   95,   94,   93,   92,   88,   85,   71,   56,  232,
        3,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232
    } ;

static yyconst flex_int16_t yy_chk[449] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    8,    9,   10,
       10,   11,   11,   12,   10,   13,   11,   17,   20,   20,
       21,   19,   26,   26,    8,   21,   44,   17,   12,   19,
       19,   21,   22,   44,   22,   22,   23,   40,   23,   23,

       28,   28,   43,    9,   41,   45,   13,   22,   41,   45,
       40,   23,   53,   49,   22,   43,   59,   41,   62,   62,
       43,   68,  240,   22,   49,   77,   77,   23,   81,   81,
       82,  228,   82,   82,   83,  227,   83,  127,  127,   83,
       83,  126,  126,  128,  128,   82,  129,  129,  155,  155,
      127,   59,   68,   53,  156,  156,  126,  174,  174,  175,
      175,   82,  224,  155,  176,  176,  127,  177,  177,  156,
      178,  178,  174,  217,  175,  194,  194,  195,  195,  176,
      208,  208,  177,  209,  209,  178,  220,  220,  221,  221,
      194,  215,  195,  222,  222,  208,  214,  213,  209,  211,

      210,  220,  207,  221,  206,  205,  203,  202,  222,  233,
      201,  233,  233,  233,  233,  233,  234,  200,  234,  234,
      235,  199,  235,  235,  235,  235,  235,  236,  198,  197,
      236,  237,  193,  191,  237,  238,  238,  190,  238,  239,
      189,  239,  239,  239,  239,  239,  241,  241,  188,  241,
      242,  242,  242,  242,  242,  242,  242,  243,  243,  243,
      243,  243,  243,  243,  244,  244,  244,  244,  244,  244,
      244,  245,  245,  245,  245,  245,  245,  245,  246,  246,
      246,  246,  246,  246,  246,  247,  247,  187,  247,  247,
      247,  247,  186,  185,  183,  182,  181,  179,  173,  171,

      170,  169,  168,  167,  166,  165,  164,  162,  161,  160,
      158,  157,  154,  153,  152,  151,  150,  149,  148,  147,
      145,  144,  143,  142,  141,  140,  139,  138,  137,  136,
      135,  123,  122,  121,  117,  116,  115,  114,  113,  112,
      110,  109,  106,  105,  104,  103,  101,  100,   99,   98,
       97,   96,   94,   93,   90,   86,   79,   74,   70,   64,
       61,   57,   56,   51,   50,   48,   47,   46,   42,   39,
       38,   37,   34,   33,   32,   27,   24,   16,    5,    3,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int CMD_flex_debug;
int CMD_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *CMDtext;
#line 1 "CMDscan.l"
#line 2 "CMDscan.l"

// flex --nounput -o CMDscan.cpp -P CMD CMDscan.l

#define YYLMAX 4096
#define YY_NO_UNISTD_H

#include <stdio.h>
#include "platform/platform.h"
#include "core/stringTable.h"
#include "console/console.h"
#include "console/compiler.h"
#include "console/dynamicTypes.h"
#include "core/strings/stringFunctions.h"

template< typename T >
struct Token
{
   T value;
   S32 lineNumber;
};

// Can't have ctors in structs used in unions, so we have this.
template< typename T >
inline Token< T > MakeToken( T value, U32 lineNumber )
{
   Token< T > result;
   result.value = value;
   result.lineNumber = lineNumber;
   return result;
}

#include "console/cmdgram.h"

using namespace Compiler;

#define YY_NEVER_INTERACTIVE 1

// Some basic parsing primitives...
static int Sc_ScanDocBlock();
static int Sc_ScanString(int ret);
static int Sc_ScanNum();
static int Sc_ScanVar();
static int Sc_ScanHex();
static int Sc_ScanIdent();

// Deal with debuggability of FLEX.
#ifdef TORQUE_DEBUG
#define FLEX_DEBUG 1
#else
#define FLEX_DEBUG 0
#endif

// Install our own input code...
#undef CMDgetc
int CMDgetc();

// Hack to make windows lex happy.
#ifndef isatty
inline int isatty(int) { return 0; }
#endif

// Wrap our getc, so that lex doesn't try to do its own buffering/file IO.
#define YY_INPUT(buf,result,max_size) \
   { \
      int c = '*', n; \
      for ( n = 0; n < max_size && \
            (c = CMDgetc()) != EOF && c != '\n'; ++n ) \
         buf[n] = (char) c; \
      if ( c == '\n' ) \
         buf[n++] = (char) c; \
      result = n; \
   }
   
// General helper stuff.
static int lineIndex;

// File state
void CMDSetScanBuffer(const char *sb, const char *fn);
const char * CMDgetFileLine(int &lineNumber);

// Error reporting
void CMDerror(char * s, ...);

// Reset the parser.
void CMDrestart(FILE *in);

#line 720 "CMDscan.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int CMDwrap (void );
#else
extern int CMDwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( CMDtext, CMDleng, 1, CMDout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( CMDin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( CMDin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, CMDin))==0 && ferror(CMDin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(CMDin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int CMDlex (void);

#define YY_DECL int CMDlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after CMDtext and CMDleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 105 "CMDscan.l"

         ;
#line 874 "CMDscan.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! CMDin )
			CMDin = stdin;

		if ( ! CMDout )
			CMDout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			CMDensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				CMD_create_buffer(CMDin,YY_BUF_SIZE );
		}

		CMD_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of CMDtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 233 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 381 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 107 "CMDscan.l"
{ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 108 "CMDscan.l"
{ return(Sc_ScanDocBlock()); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 109 "CMDscan.l"
;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 110 "CMDscan.l"
;
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 111 "CMDscan.l"
{lineIndex++;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 112 "CMDscan.l"
{ return(Sc_ScanString(STRATOM)); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 113 "CMDscan.l"
{ return(Sc_ScanString(TAGATOM)); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 114 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opEQ, lineIndex ); return opEQ; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 115 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opNE, lineIndex ); return opNE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 116 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opGE, lineIndex ); return opGE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 117 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opLE, lineIndex ); return opLE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 118 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opAND, lineIndex ); return opAND; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 119 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opOR, lineIndex ); return opOR; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 120 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opCOLONCOLON, lineIndex ); return opCOLONCOLON; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 121 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opMINUSMINUS, lineIndex ); return opMINUSMINUS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 122 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opPLUSPLUS, lineIndex ); return opPLUSPLUS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 123 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opSTREQ, lineIndex ); return opSTREQ; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 124 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opSTRNE, lineIndex ); return opSTRNE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 125 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opSHL, lineIndex ); return opSHL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 126 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opSHR, lineIndex ); return opSHR; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 127 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opPLASN, lineIndex ); return opPLASN; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 128 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opMIASN, lineIndex ); return opMIASN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 129 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opMLASN, lineIndex ); return opMLASN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 130 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opDVASN, lineIndex ); return opDVASN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 131 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opMODASN, lineIndex ); return opMODASN; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 132 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opANDASN, lineIndex ); return opANDASN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 133 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opXORASN, lineIndex ); return opXORASN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 134 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opORASN, lineIndex ); return opORASN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 135 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opSLASN, lineIndex ); return opSLASN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 136 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opSRASN, lineIndex ); return opSRASN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 137 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opINTNAME, lineIndex ); return opINTNAME; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 138 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( opINTNAMER, lineIndex ); return opINTNAMER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 139 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( '\n', lineIndex ); return '@'; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 140 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( '\t', lineIndex ); return '@'; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 141 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( ' ', lineIndex ); return '@'; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 142 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( 0, lineIndex ); return '@'; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 143 "CMDscan.l"
{ /* this comment stops syntax highlighting from getting messed up when editing the lexer in TextPad */
         register int c = 0, l;
         for ( ; ; )
         {
            l = c;
            c = yyinput();

            // Is this an open comment?
            if ( c == EOF )
            {
               CMDerror( "unexpected end of file found in comment" );
               break;
            }

            // Increment line numbers.
            else if ( c == '\n' )
               lineIndex++;

            // Did we find the end of the comment?
            else if ( l == '*' && c == '/' )
               break;
         }
      }
	YY_BREAK
case 38:
#line 167 "CMDscan.l"
case 39:
#line 168 "CMDscan.l"
case 40:
#line 169 "CMDscan.l"
case 41:
#line 170 "CMDscan.l"
case 42:
#line 171 "CMDscan.l"
case 43:
#line 172 "CMDscan.l"
case 44:
#line 173 "CMDscan.l"
case 45:
#line 174 "CMDscan.l"
case 46:
#line 175 "CMDscan.l"
case 47:
#line 176 "CMDscan.l"
case 48:
#line 177 "CMDscan.l"
case 49:
#line 178 "CMDscan.l"
case 50:
#line 179 "CMDscan.l"
case 51:
#line 180 "CMDscan.l"
case 52:
#line 181 "CMDscan.l"
case 53:
#line 182 "CMDscan.l"
case 54:
#line 183 "CMDscan.l"
case 55:
#line 184 "CMDscan.l"
case 56:
#line 185 "CMDscan.l"
case 57:
#line 186 "CMDscan.l"
case 58:
#line 187 "CMDscan.l"
case 59:
#line 188 "CMDscan.l"
case 60:
#line 189 "CMDscan.l"
case 61:
YY_RULE_SETUP
#line 189 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( CMDtext[ 0 ], lineIndex ); return CMDtext[ 0 ]; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 190 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwIN, lineIndex ); return(rwIN); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 191 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwCASEOR, lineIndex ); return(rwCASEOR); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 192 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwBREAK, lineIndex ); return(rwBREAK); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 193 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwRETURN, lineIndex ); return(rwRETURN); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 194 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwELSE, lineIndex ); return(rwELSE); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 195 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwASSERT, lineIndex ); return(rwASSERT); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 196 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwWHILE, lineIndex ); return(rwWHILE); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 197 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwDO, lineIndex ); return(rwDO); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 198 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwIF, lineIndex ); return(rwIF); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 199 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwFOREACHSTR, lineIndex ); return(rwFOREACHSTR); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 200 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwFOREACH, lineIndex ); return(rwFOREACH); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 201 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwFOR, lineIndex ); return(rwFOR); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 202 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwCONTINUE, lineIndex ); return(rwCONTINUE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 203 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwDEFINE, lineIndex ); return(rwDEFINE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 204 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwDECLARE, lineIndex ); return(rwDECLARE); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 205 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwDECLARESINGLETON, lineIndex ); return(rwDECLARESINGLETON); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 206 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwDATABLOCK, lineIndex ); return(rwDATABLOCK); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 207 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwCASE, lineIndex ); return(rwCASE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 208 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwSWITCHSTR, lineIndex ); return(rwSWITCHSTR); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 209 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwSWITCH, lineIndex ); return(rwSWITCH); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 210 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwDEFAULT, lineIndex ); return(rwDEFAULT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 211 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwPACKAGE, lineIndex ); return(rwPACKAGE); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 212 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( rwNAMESPACE, lineIndex ); return(rwNAMESPACE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 213 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( 1, lineIndex ); return INTCONST; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 214 "CMDscan.l"
{ CMDlval.i = MakeToken< int >( 0, lineIndex ); return INTCONST; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 215 "CMDscan.l"
{ return(Sc_ScanVar()); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 216 "CMDscan.l"
{ return Sc_ScanIdent(); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 217 "CMDscan.l"
return(Sc_ScanHex());
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 218 "CMDscan.l"
{ CMDtext[CMDleng] = 0; CMDlval.i = MakeToken< int >( dAtoi(CMDtext), lineIndex ); return INTCONST; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 219 "CMDscan.l"
return Sc_ScanNum();
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 220 "CMDscan.l"
return(ILLEGAL_TOKEN);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 221 "CMDscan.l"
return(ILLEGAL_TOKEN);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 222 "CMDscan.l"
ECHO;
	YY_BREAK
#line 1382 "CMDscan.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed CMDin at a new source and called
			 * CMDlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = CMDin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( CMDwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * CMDtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of CMDlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					CMDrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			CMDrestart(CMDin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 233 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 233 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 232);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					CMDrestart(CMDin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( CMDwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve CMDtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void CMDrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        CMDensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            CMD_create_buffer(CMDin,YY_BUF_SIZE );
	}

	CMD_init_buffer(YY_CURRENT_BUFFER,input_file );
	CMD_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void CMD_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		CMDpop_buffer_state();
	 *		CMDpush_buffer_state(new_buffer);
     */
	CMDensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	CMD_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (CMDwrap()) processing, but the only time this flag
	 * is looked at is after CMDwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void CMD_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	CMDin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE CMD_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) CMDalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in CMD_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) CMDalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in CMD_create_buffer()" );

	b->yy_is_our_buffer = 1;

	CMD_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with CMD_create_buffer()
 * 
 */
    void CMD_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		CMDfree((void *) b->yy_ch_buf  );

	CMDfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a CMDrestart() or at EOF.
 */
    static void CMD_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	CMD_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then CMD_init_buffer was _probably_
     * called from CMDrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

    b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void CMD_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		CMD_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void CMDpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	CMDensure_buffer_stack();

	/* This block is copied from CMD_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from CMD_switch_to_buffer. */
	CMD_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void CMDpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	CMD_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		CMD_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void CMDensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)CMDalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)CMDrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE CMD_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) CMDalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in CMD_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	CMD_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to CMDlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       CMD_scan_bytes() instead.
 */
YY_BUFFER_STATE CMD_scan_string (yyconst char * yystr )
{
    
	return CMD_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to CMDlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE CMD_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) CMDalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in CMD_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = CMD_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in CMD_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up CMDtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		CMDtext[CMDleng] = (yy_hold_char); \
		(yy_c_buf_p) = CMDtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		CMDleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int CMDget_lineno  (void)
{
        
    return CMDlineno;
}

/** Get the input stream.
 * 
 */
FILE *CMDget_in  (void)
{
        return CMDin;
}

/** Get the output stream.
 * 
 */
FILE *CMDget_out  (void)
{
        return CMDout;
}

/** Get the length of the current token.
 * 
 */
int CMDget_leng  (void)
{
        return CMDleng;
}

/** Get the current token.
 * 
 */

char *CMDget_text  (void)
{
        return CMDtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void CMDset_lineno (int  line_number )
{
    
    CMDlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see CMD_switch_to_buffer
 */
void CMDset_in (FILE *  in_str )
{
        CMDin = in_str ;
}

void CMDset_out (FILE *  out_str )
{
        CMDout = out_str ;
}

int CMDget_debug  (void)
{
        return CMD_flex_debug;
}

void CMDset_debug (int  bdebug )
{
        CMD_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from CMDlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    CMDin = stdin;
    CMDout = stdout;
#else
    CMDin = (FILE *) 0;
    CMDout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * CMDlex_init()
     */
    return 0;
}

/* CMDlex_destroy is for both reentrant and non-reentrant scanners. */
int CMDlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		CMD_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		CMDpop_buffer_state();
	}

	/* Destroy the stack itself. */
	CMDfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * CMDlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *CMDalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *CMDrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void CMDfree (void * ptr )
{
	free( (char *) ptr );	/* see CMDrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 222 "CMDscan.l"



static const char *scanBuffer;
static const char *fileName;
static int scanIndex;

const char * CMDGetCurrentFile()
{
   return fileName;
}

int CMDGetCurrentLine()
{
   return lineIndex;
}

extern bool gConsoleSyntaxError;

void CMDerror(char *format, ...)
{
   Compiler::gSyntaxError = true;

   const int BUFMAX = 1024;
   char tempBuf[BUFMAX];
   va_list args;
   va_start( args, format );
#ifdef TORQUE_OS_WIN
   _vsnprintf( tempBuf, BUFMAX, format, args );
#else
   vsnprintf( tempBuf, BUFMAX, format, args );
#endif

   if(fileName)
   {
      Con::errorf(ConsoleLogEntry::Script, "%s Line: %d - %s", fileName, lineIndex, tempBuf);

#ifndef NO_ADVANCED_ERROR_REPORT
      // dhc - lineIndex is bogus.  let's try to add some sanity back in.
      int i,j,n;
      char c;
      int linediv = 1;
      // first, walk the buffer, trying to detect line ending type.
      // this is imperfect, if inconsistant line endings exist...
      for (i=0; i<scanIndex; i++)
      {
         c = scanBuffer[i];
         if (c=='\r' && scanBuffer[i+1]=='\n') linediv = 2; // crlf detected
         if (c=='\r' || c=='\n' || c==0) break; // enough for us to stop.
      }
      // grab some of the chars starting at the error location - lineending.
      i = 1; j = 0; n = 1;
      // find prev lineending
      while (n<BUFMAX-8 && i<scanIndex) // cap at file start
      {
         c = scanBuffer[scanIndex-i];
         if ((c=='\r' || c=='\n') && i>BUFMAX>>2) break; // at least get a little data
         n++; i++;
      }
      // find next lineending
      while (n<BUFMAX-8 && j<BUFMAX>>1) // cap at half-buf-size forward
      {
         c = scanBuffer[scanIndex+j];
         if (c==0) break;
         if ((c=='\r' || c=='\n') && j>BUFMAX>>2) break; // at least get a little data
         n++; j++;
      }
      if (i) i--; // chop off extra linefeed.
      if (j) j--; // chop off extra linefeed.
      // build our little text block
      if (i) dStrncpy(tempBuf,scanBuffer+scanIndex-i,i);
      dStrncpy(tempBuf+i,"##", 2); // bracketing.
      tempBuf[i+2] = scanBuffer[scanIndex]; // copy the halt character.
      dStrncpy(tempBuf+i+3,"##", 2); // bracketing.
      if (j) dStrncpy(tempBuf+i+5,scanBuffer+scanIndex+1,j); // +1 to go past current char.
      tempBuf[i+j+5] = 0; // null terminate
      for(n=0; n<i+j+5; n++) // convert CR to LF if alone...
         if (tempBuf[n]=='\r' && tempBuf[n+1]!='\n') tempBuf[n] = '\n';
      // write out to console the advanced error report
      Con::warnf(ConsoleLogEntry::Script, ">>> Advanced script error report.  Line %d.", lineIndex);
      Con::warnf(ConsoleLogEntry::Script, ">>> Some error context, with ## on sides of error halt:");
      Con::errorf(ConsoleLogEntry::Script, "%s", tempBuf);
      Con::warnf(ConsoleLogEntry::Script, ">>> Error report complete.\n");
#endif

      // Update the script-visible error buffer.
      const char *prevStr = Con::getVariable("$ScriptError");
      if (prevStr[0])
         dSprintf(tempBuf, sizeof(tempBuf), "%s\n%s Line: %d - Syntax error.", prevStr, fileName, lineIndex);
      else
         dSprintf(tempBuf, sizeof(tempBuf), "%s Line: %d - Syntax error.", fileName, lineIndex);
      Con::setVariable("$ScriptError", tempBuf);

      // We also need to mark that we came up with a new error.
      static S32 sScriptErrorHash=1000;
      Con::setIntVariable("$ScriptErrorHash", sScriptErrorHash++);
   }
   else
      Con::errorf(ConsoleLogEntry::Script, tempBuf);
}

void CMDSetScanBuffer(const char *sb, const char *fn)
{
   scanBuffer = sb;
   fileName = fn;
   scanIndex = 0;
   lineIndex = 1;
}

int CMDgetc()
{
   int ret = scanBuffer[scanIndex];
   if(ret)
      scanIndex++;
   else
      ret = -1;
   return ret;
}

int CMDwrap()
{
   return 1;
}

static int Sc_ScanVar()
{
   // Truncate the temp buffer...
   CMDtext[CMDleng] = 0;

   // Make it a stringtable string!
   CMDlval.s = MakeToken< StringTableEntry >( StringTable->insert(CMDtext), lineIndex );
   return(VAR);
}

static int charConv(int in)
{
   switch(in)
   {
      case 'r':
         return '\r';
      case 'n':
         return '\n';
      case 't':
         return '\t';
      default:
         return in;
   }
}

static int getHexDigit(char c)
{
   if(c >= '0' && c <= '9')
      return c - '0';
   if(c >= 'A' && c <= 'F')
      return c - 'A' + 10;
   if(c >= 'a' && c <= 'f')
      return c - 'a' + 10;
   return -1;
}

static int Sc_ScanDocBlock()
{
   S32 len = dStrlen(CMDtext);
   char* text = (char *) consoleAlloc(len + 1);
   S32 line = lineIndex;

   for( S32 i = 0, j = 0; j <= len; j++ )
   {
      if( ( j <= (len - 2) ) && ( CMDtext[j] == '/' ) && ( CMDtext[j + 1] == '/' ) && ( CMDtext[j + 2] == '/' ) )
      {
         j += 2;
         continue;
      }

      if( CMDtext[j] == '\r' )
         continue;

      if( CMDtext[j] == '\n' )
         lineIndex++;

      text[i++] = CMDtext[j];
   }

   CMDlval.str = MakeToken< char* >( text, line );
   return(DOCBLOCK);
}

static int Sc_ScanString(int ret)
{
   CMDtext[CMDleng - 1] = 0;
   if(!collapseEscape(CMDtext+1))
      return -1;
      
   char* buffer = ( char* ) consoleAlloc( dStrlen( CMDtext ) );
   dStrcpy( buffer, CMDtext + 1 );
   
   CMDlval.str = MakeToken< char* >( buffer, lineIndex );
   return ret;
}

static int Sc_ScanIdent()
{
   ConsoleBaseType *type;

   CMDtext[CMDleng] = 0;

   if((type = ConsoleBaseType::getTypeByName(CMDtext)) != NULL)
   {
      /* It's a type */
      CMDlval.i = MakeToken< int >( type->getTypeID(), lineIndex );
      return TYPEIDENT;
   }

   /* It's an identifier */
   CMDlval.s = MakeToken< StringTableEntry >( StringTable->insert(CMDtext), lineIndex );
   return IDENT;
}

void expandEscape(char *dest, const char *src)
{
   U8 c;
   while((c = (U8) *src++) != 0)
   {
      if(c == '\"')
      {
         *dest++ = '\\';
         *dest++ = '\"';
      }
      else if(c == '\\')
      {
         *dest++ = '\\';
         *dest++ = '\\';
      }
      else if(c == '\r')
      {
         *dest++ = '\\';
         *dest++ = 'r';
      }
      else if(c == '\n')
      {
         *dest++ = '\\';
         *dest++ = 'n';
      }
      else if(c == '\t')
      {
         *dest++ = '\\';
         *dest++ = 't';
      }
      else if(c == '\'')
      {
         *dest++ = '\\';
         *dest++ = '\'';
      }
      else if((c >= 1 && c <= 7) ||
              (c >= 11 && c <= 12) ||
              (c >= 14 && c <= 15))
      {
        /*  Remap around: \b = 0x8, \t = 0x9, \n = 0xa, \r = 0xd */
        static U8 expandRemap[15] = { 0x0,
                                        0x0,
                                        0x1,
                                        0x2,
                                        0x3,
                                        0x4,
                                        0x5,
                                        0x6,
                                        0x0,
                                        0x0,
                                        0x0,
                                        0x7,
                                        0x8,
                                        0x0,
                                        0x9 };

         *dest++ = '\\';
         *dest++ = 'c';
         if(c == 15)
            *dest++ = 'r';
         else if(c == 16)
            *dest++ = 'p';
         else if(c == 17)
            *dest++ = 'o';
         else
            *dest++ = expandRemap[c] + '0';
      }
      else if(c < 32)
      {
         *dest++ = '\\';
         *dest++ = 'x';
         S32 dig1 = c >> 4;
         S32 dig2 = c & 0xf;
         if(dig1 < 10)
            dig1 += '0';
         else
            dig1 += 'A' - 10;
         if(dig2 < 10)
            dig2 += '0';
         else
            dig2 += 'A' - 10;
         *dest++ = dig1;
         *dest++ = dig2;
      }
      else
         *dest++ = c;
   }
   *dest = '\0';
}

bool collapseEscape(char *buf)
{
   S32 len = dStrlen(buf) + 1;
   for(S32 i = 0; i < len;)
   {
      if(buf[i] == '\\')
      {
         if(buf[i+1] == 'x')
         {
            S32 dig1 = getHexDigit(buf[i+2]);
            if(dig1 == -1)
               return false;

            S32 dig2 = getHexDigit(buf[i+3]);
            if(dig2 == -1)
               return false;
            buf[i] = dig1 * 16 + dig2;
            dMemmove(buf + i + 1, buf + i + 4, len - i - 3);
            len -= 3;
            i++;
         }
         else if(buf[i+1] == 'c')
         {
            /*  Remap around: \b = 0x8, \t = 0x9, \n = 0xa, \r = 0xd */
            static U8 collapseRemap[10] = { 0x1,
                                              0x2,
                                              0x3,
                                              0x4,
                                              0x5,
                                              0x6,
                                              0x7,
                                              0xb,
                                              0xc,
                                              0xe };

            if(buf[i+2] == 'r')
                buf[i] = 15;
            else if(buf[i+2] == 'p')
               buf[i] = 16;
            else if(buf[i+2] == 'o')
               buf[i] = 17;
            else
            {
                int dig1 = buf[i+2] - '0';
                if(dig1 < 0 || dig1 > 9)
                   return false;
                buf[i] = collapseRemap[dig1];
            }
            // Make sure we don't put 0x1 at the beginning of the string.
            if ((buf[i] == 0x1) && (i == 0))
            {
               buf[i] = 0x2;
               buf[i+1] = 0x1;
               dMemmove(buf + i + 2, buf + i + 3, len - i - 1);
               len -= 1;
            }
            else
            {
               dMemmove(buf + i + 1, buf + i + 3, len - i - 2);
               len -= 2;
            }
            i++;
         }
         else
         {
            buf[i] = charConv(buf[i+1]);
            dMemmove(buf + i + 1, buf + i + 2, len - i - 1);
            len--;
            i++;
         }
      }
      else
         i++;
   }
   return true;
}

static int Sc_ScanNum()
{
   CMDtext[CMDleng] = 0;
   CMDlval.f = MakeToken< double >( dAtof(CMDtext), lineIndex );
   return(FLTCONST);
}

static int Sc_ScanHex()
{
   S32 val = 0;
   dSscanf(CMDtext, "%x", &val);
   CMDlval.i = MakeToken< int >( val, lineIndex );
   return INTCONST;
}

void CMD_reset()
{
   CMDrestart(NULL);
}

