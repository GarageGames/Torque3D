//--- OBJECT WRITE BEGIN ---
%guiContent = new GuiColorPickerCtrl(ColorPickerDlg,EditorGuiGroup) {
   canSaveDynamicFields = "0";
   isContainer = "1";
   Profile = "ToolsGuiDefaultProfile";
   HorizSizing = "right";
   VertSizing = "bottom";
   position = "0 0";
   Extent = "800 600";
   MinExtent = "8 2";
   canSave = "1";
   Visible = "1";
   hovertime = "1000";
   DisplayMode = "Dropper"; // this makes the background visible
   ActionOnMove = "1";

   new GuiWindowCtrl(GuiPickerDlg) {
      canSaveDynamicFields = "0";
      isContainer = "1";
      Profile = "ToolsGuiWindowProfile";
      HorizSizing = "windowRelative";
      VertSizing = "windowRelative";
      position = "170 100";
      Extent = "348 347";
      MinExtent = "8 2";
      canSave = "1";
      Visible = "1";
      hovertime = "1000";
      text = "Color Picker";
      maxLength = "255";
      resizeWidth = "0";
      resizeHeight = "0";
      canMove = "1";
      canClose = "1";
      canMinimize = "0";
      canMaximize = "0";
      minSize = "50 50";
      closeCommand = "DoColorPickerCancelCallback(); ColorPickerDlg.getRoot().popDialog(ColorPickerDlg);";
      
      new GuiBitmapBorderCtrl(){ // color blend
         Profile = "ToolsGuiGroupBorderProfile";
         position = "3 24";
         Extent = "255 258";
      };
      new GuiBitmapBorderCtrl(){ // Hue
         Profile = "ToolsGuiGroupBorderProfile";
         position = "263 23";
         Extent = "25 261";
      };
      new GuiBitmapBorderCtrl(){ // new old color
         Profile = "ToolsGuiGroupBorderProfile";
         position = "292 37";
         Extent = "52 99";
      };
      new GuiBitmapBorderCtrl(){ // rgb
         Profile = "ToolsGuiGroupBorderProfile";
         position = "292 209";
         Extent = "52 75";
      };
      new GuiBitmapBorderCtrl(){ // alpha
         Profile = "ToolsGuiGroupBorderProfile";
         position = "3 287";
         Extent = "341 24";
      };
      new GuiColorPickerCtrl(ColorBlendSelect) {
         canSaveDynamicFields = "0";
         isContainer = "0";
         Profile = "ToolsGuiDefaultProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "3 24";
         Extent = "255 258";
         MinExtent = "8 2";
         canSave = "1";
         Visible = "1";
         command = "updateRGBValues(1);";
         hovertime = "1000";
         baseColor = "1 0 0 1";
         PickColor = "0 0 0 1";
         SelectorGap = "1";
         DisplayMode = "BlendColor";
         ActionOnMove = "1";
      };
      new GuiColorPickerCtrl(ColorRangeSelect) {
         canSaveDynamicFields = "0";
         isContainer = "0";
         Profile = "ToolsGuiDefaultProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "264 24";
         Extent = "21 257";
         MinExtent = "8 2";
         canSave = "1";
         Visible = "1";
         Command = "updatePickerBaseColor(1);";
         hovertime = "1000";
         baseColor = "1 0 0 1";
         PickColor = "1 0 0 1";
         SelectorGap = "1";
         DisplayMode = "VertColor";
         ActionOnMove = "1";
      };
      new GuiTextCtrl() {
         canSaveDynamicFields = "0";
         isContainer = "0";
         Profile = "ToolsGuiTextProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "298 215";
         Extent = "8 18";
         MinExtent = "8 2";
         canSave = "1";
         Visible = "1";
         hovertime = "1000";
         text = "R";
         maxLength = "255";
      };
      new GuiTextEditCtrl(Channel_R_Val) { // Red Channal
         Profile = "ToolsGuiNumericTextEditProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "307 215";
         Extent = "34 18";
         text = "0";
         maxLength = "4";
         altCommand = "setColorInfo();";
      };
      new GuiTextCtrl() {
         canSaveDynamicFields = "0";
         isContainer = "0";
         Profile = "ToolsGuiTextProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "297 238";
         Extent = "8 18";
         MinExtent = "8 2";
         canSave = "1";
         Visible = "1";
         hovertime = "1000";
         text = "G";
         maxLength = "255";
      };
      new GuiTextEditCtrl(Channel_G_Val) { // Green Channal
         Profile = "ToolsGuiNumericTextEditProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "307 238";
         Extent = "34 18";
         text = "0";
         maxLength = "4";
         altCommand = "setColorInfo();";
      };
      new GuiTextCtrl() {
         canSaveDynamicFields = "0";
         isContainer = "0";
         Profile = "ToolsGuiTextProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "298 261";
         Extent = "8 18";
         MinExtent = "8 2";
         canSave = "1";
         Visible = "1";
         hovertime = "1000";
         text = "B";
         maxLength = "255";
      };
      new GuiTextEditCtrl(Channel_B_Val) { // Blue Channal
         Profile = "ToolsGuiNumericTextEditProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "307 261";
         Extent = "34 18";
         text = "0";
         maxLength = "4";
         altCommand = "setColorInfo();";
      };
      
      
      new GuiControl() {
         class = "AggregateControl";
         position = "2 290";
         Extent = "341 18";
         
         new GuiTextCtrl() {
            canSaveDynamicFields = "0";
            isContainer = "0";
            Profile = "ToolsGuiTextProfile";
            HorizSizing = "right";
            VertSizing = "bottom";
            position = "267 0";
            Extent = "29 18";
            MinExtent = "8 2";
            canSave = "1";
            Visible = "1";
            hovertime = "1000";
            text = "Alpha";
            maxLength = "255";
         };
         new GuiSliderCtrl(ColorAlphaSelect) {
            internalName = "slider";
            canSaveDynamicFields = "0";
            isContainer = "0";
            Profile = "ToolsGuiSliderProfile";
            HorizSizing = "right";
            VertSizing = "bottom";
            position = "5 3";
            Extent = "251 13";
            MinExtent = "8 2";
            canSave = "1";
            Visible = "1";
            altCommand = "$ThisControl.getParent().updateFromChild($ThisControl); updateColorPickerAlpha( $ThisControl.getValue() );";
            hovertime = "1000";
            range = "0 1";
            ticks = "0";
            value = "1";
         };
         new GuiTextEditCtrl(Channel_A_Val) { // Alpha Channal
            internalName = "textEdit";
            Profile = "ToolsGuiNumericTextEditProfile";
            HorizSizing = "right";
            VertSizing = "bottom";
            position = "305 0";
            Extent = "34 18";
            text = "0";
            maxLength = "4";
            altCommand = "$ThisControl.getParent().updateFromChild($ThisControl); updateColorPickerAlpha( $ThisControl.getValue() );";
         };
      };
      new GuiSwatchButtonCtrl(myColor){ // New Color // 
         Profile = "ToolsGuiDefaultProfile";
         position = "293 38";
         Extent = "50 50";
      };      
      new GuiTextCtrl(){
         Profile = "ToolsGuiDefaultProfile";
         text = "New";
         position = "306 22";
         Extent = "26 14";
      };
      new GuiSwatchButtonCtrl(oldColor){ // Old Color // 
         Profile = "ToolsGuiDefaultProfile";
         position = "293 85";
         Extent = "50 50";
      };
      new GuiTextCtrl(){
         Profile = "ToolsGuiDefaultProfile";
         text = "Old";
         position = "310 138";
         Extent = "26 14";
      };
      new GuiButtonCtrl() {
         canSaveDynamicFields = "0";
         isContainer = "0";
         Profile = "ToolsGuiButtonProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "144 316";
         Extent = "115 24";
         MinExtent = "8 2";
         canSave = "1";
         Visible = "1";
         Command = "DoColorPickerCallback();";
         hovertime = "1000";
         text = "Select";
         groupNum = "-1";
         buttonType = "PushButton";
         useMouseEvents = "0";
      };
      new GuiButtonCtrl() {
         canSaveDynamicFields = "0";
         isContainer = "0";
         Profile = "ToolsGuiButtonProfile";
         HorizSizing = "right";
         VertSizing = "bottom";
         position = "268 316";
         Extent = "73 24";
         MinExtent = "8 2";
         canSave = "1";
         Visible = "1";
         Command = "DoColorPickerCancelCallback();";
         hovertime = "1000";
         text = "Cancel";
         groupNum = "-1";
         buttonType = "PushButton";
         useMouseEvents = "0";
      };
   };
};
//--- OBJECT WRITE END ---

$ColorPickerCallback = ""; // Control that we need to update
$ColorPickerCancelCallback = "";
$ColorPickerUpdateCallback = "";
$ColorCallbackType   = 1;  // ColorI

function ColorFloatToInt( %color )
{
   %red     = getWord( %color, 0 );
   %green   = getWord( %color, 1 );
   %blue    = getWord( %color, 2 );
   %alpha   = getWord( %color, 3 );
   
   return mCeil( %red * 255 ) SPC mCeil( %green * 255 ) SPC mCeil( %blue * 255 ) SPC mCeil( %alpha * 255 );
}

function ColorIntToFloat( %color )
{
   %red     = getWord( %color, 0 );
   %green   = getWord( %color, 1 );
   %blue    = getWord( %color, 2 );
   %alpha   = getWord( %color, 3 );

   return ( %red / 255 ) SPC ( %green / 255 ) SPC ( %blue / 255 ) SPC ( %alpha / 255 );
}

// This function pushes the color picker dialog and returns to a callback the selected value
function GetColorI( %currentColor, %callback, %root, %updateCallback, %cancelCallback )
{
   $ColorPickerSignal = 1; 
   $ColorPickerCallback = %callback;
   $ColorPickerCancelCallback = %cancelCallback;
   $ColorPickerUpdateCallback = %updateCallback;
   $ColorCallbackType = 1; // ColorI
   
   oldColor.color = ColorIntToFloat( %currentColor );
   myColor.color = ColorIntToFloat( %currentColor );
   
   ColorRangeSelect.showReticle = true;
   ColorBlendSelect.showReticle = true;
   
   // Set the range according to int
   ColorAlphaSelect.range = "0 255";
   
   // Set the RGBA displays accordingly
   %red = getWord(%currentColor, 0) / 255;
   %green = getWord(%currentColor, 1) / 255;
   %blue = getWord(%currentColor, 2) / 255;
   %alpha = getWord(%currentColor, 3);
   
   // set the initial range blend to correct color, no alpha needed
   // this should also set the color blend select right now
   ColorRangeSelect.baseColor = %red SPC %green SPC %blue SPC "1.0";
   ColorRangeSelect.updateColor();
   
   if(!isObject(%root))
      %root = Canvas;
  
   %root.pushDialog(ColorPickerDlg);
   
   // update the alpha value first
   ColorAlphaSelect.setValue( %alpha );
   Channel_A_Val.setText( %alpha );
}

function GetColorF( %currentColor, %callback, %root, %updateCallback, %cancelCallback )
{
   $ColorPickerSignal = 1; 
   $ColorPickerCallback = %callback;
   $ColorPickerCancelCallback = %cancelCallback;
   $ColorPickerUpdateCallback = %updateCallback;
   $ColorCallbackType = 2; // ColorF
   
   oldColor.color = %currentColor;  
   myColor.color = %currentColor;   
   
   ColorRangeSelect.showReticle = true;
   ColorBlendSelect.showReticle = true;
   
   // Set the range according to float
   ColorAlphaSelect.range = "0 1";
   
   // Set the RGBA displays accordingly
   %red = getWord(%currentColor, 0);
   %green = getWord(%currentColor, 1);
   %blue = getWord(%currentColor, 2);
   %alpha = getWord(%currentColor, 3);
   
   // set the initial range blend to correct color, no alpha needed
   // this should also set the color blend select right now
   ColorRangeSelect.baseColor = %red SPC %green SPC %blue SPC "1.0";
   ColorRangeSelect.updateColor();
   
   if(!isObject(%root))
      %root = Canvas;
   %root.pushDialog(ColorPickerDlg);
   
   // update the alpha value first
   ColorAlphaSelect.setValue( %alpha );
   Channel_A_Val.setText( %alpha );
}

// This function is used to update the text controls at the top
function setColorInfo()
{
   %red = Channel_R_Val.getValue();
   %green = Channel_G_Val.getValue();
   %blue = Channel_B_Val.getValue();
   
   if( $ColorCallbackType == 1)
   {
      %red = (%red / 255);
      %green = (%green / 255);
      %blue = (%blue / 255);
   }
      
   $ColorPickerSignal = 1; 
   
   ColorBlendSelect.baseColor = %red SPC %green SPC %blue SPC "1.0";
   ColorBlendSelect.updateColor();
}

// return mycolor.color
function DoColorPickerCallback()
{
   eval( $ColorPickerCallback @ "(\"" @ constructNewColor(mycolor.color, $ColorCallbackType) @"\");" );
   ColorPickerDlg.getRoot().popDialog(ColorPickerDlg);   
}   

function DoColorPickerCancelCallback()
{
   ColorPickerDlg.getRoot().popDialog( ColorPickerDlg );
   if( $ColorPickerCancelCallback !$= "" )
      eval( $ColorPickerCancelCallback @ "(\"" @ constructNewColor( oldColor.color, $ColorCallbackType ) @ "\");" );
}

function DoColorPickerUpdateCallback()
{
   if( $ColorPickerUpdateCallback !$= "" )
      eval( $ColorPickerUpdateCallback @ "(\"" @ constructNewColor( myColor.color, $ColorCallbackType ) @ "\");" );
}

// this is called from ColorRangeSelect.updateColor
function updatePickerBaseColor( %location )
{
   if( $ColorPickerSignal && %location )
      %pickColor = ColorRangeSelect.baseColor;
   else
      %pickColor = ColorRangeSelect.pickColor;
   $ColorPickerSignal = 1;
   
   %red = getWord(%pickColor, 0);
   %green = getWord(%pickColor, 1);
   %blue = getWord(%pickColor, 2);
   %alpha = getWord(%pickColor, 3);
   
   ColorBlendSelect.baseColor = %red SPC %green SPC %blue SPC "1.0";
   ColorBlendSelect.updateColor();
}

// this is called from ColorBlendSelect.updateColor
function updateRGBValues( %location )
{
   //update the color based on where it came from
   if( $ColorPickerSignal && %location )
      %pickColor = ColorBlendSelect.baseColor;
   else
      %pickColor = ColorBlendSelect.pickColor;
   
   //lets prepare the color
   %red = getWord(%pickColor, 0);
   %green = getWord(%pickColor, 1);
   %blue = getWord(%pickColor, 2);  
   //the alpha should be grabbed from mycolor
   %alpha = getWord(myColor.color, 3);    
     
   // set the color!
   myColor.color = %red SPC %green SPC %blue SPC %alpha ;
   
   DoColorPickerUpdateCallback();
   
   //update differently depending on type
   if( $ColorCallbackType == 1 )
   {
      %red = mCeil(%red * 255);
      %blue = mCeil(%blue * 255);
      %green = mCeil(%green * 255);
   }
   else
   {
      %red = mFloatLength(%red, 3);
      %blue = mFloatLength(%blue, 3);
      %green = mFloatLength(%green, 3);
   }
   
   // changes current color values
   Channel_R_Val.setValue(%red); 
   Channel_G_Val.setValue(%green);
   Channel_B_Val.setValue(%blue);
   
   $ColorPickerSignal = 0;
}

function updateColorPickerAlpha( %alphaVal )
{
   //lets prepare the color
   %red = getWord(myColor.color, 0);
   %green = getWord(myColor.color, 1);
   %blue = getWord(myColor.color, 2);  
   %alpha = %alphaVal;
   
   if( $ColorCallbackType == 1 )
      %alpha = (%alpha / 255);
   
   myColor.color = %red SPC %green SPC %blue SPC %alpha ;
   
   DoColorPickerUpdateCallback();
} 

function constructNewColor(%pickColor, %colorType )
{
   %red = getWord(%pickColor, 0);
   %green = getWord(%pickColor, 1);
   %blue = getWord(%pickColor, 2);
   %alpha = ColorAlphaSelect.getValue();
   
   // Update the text controls to reflect new color
   //setColorInfo(%red, %green, %blue, %alpha);
   if ( %colorType == 1 ) // ColorI
      return mCeil( %red * 255 ) SPC mCeil( %green * 255 ) SPC mCeil( %blue * 255 ) SPC %alpha;
   else // ColorF
      return %red SPC %green SPC %blue SPC %alpha;
}
